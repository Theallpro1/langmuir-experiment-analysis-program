def ion_saturation_basic_auto(self, data, tolerance = 0.01):
    first_smooth = [data[0],self.savgol_smoothing(data,51,3)]
    first_der = self.derivative(first_smooth, 1)
    first_der_smooth = [data[0],self.savgol_smoothing(first_der,51,3)]
    second_der = self.derivative(first_der_smooth, 1)
    second_der_smooth = [data[0],self.savgol_smoothing(second_der,51,3)]
    second_der_smooth = [data[0], np.absolute(data[1])]

    max_second_der_smooth = np.max(second_der_smooth[1])
    isat_region = second_der_smooth[1] < tolerance * max_second_der_smooth

    # Account for some possible stray data points so you must take longest sequence of trues.

    isat_guess_lower = np.where(isat_region == True)[0][0]
    isat_guess_upper = np.where(isat_region == True)[0][-1]

    print(isat_guess_lower)
    print(isat_guess_upper)

    m,b = np.polyfit(data[0][isat_guess_lower:isat_guess_upper], data[1][isat_guess_lower:isat_guess_upper], 1)
    return m*data[0] + b, data[1] - m*data[0] -b

    #PRELIM FIX, NOT CHECKED	
    def normal_potential(self):
        if self.check_selected_files() == 1:
            try:
                a1 = self.bounds[0].get()
                a2 = self.bounds[1].get()
                b1 = self.bounds[2].get()
                b2 = self.bounds[3].get()
            except:
                self.open_popup("plasma potential fit bounds not set properly", "yellow", "NOTICE")

            fname = self.get_selected()[0]
            data_t = self.currently_displayed[fname]
            m1,intercept1 = np.polyfit(data_t[0][a1:a2], data_t[1][a1:a2], 1)
            m2,intercept2 = np.polyfit(data_t[0][b1:b2], data_t[1][b1:b2], 1)
            self.normal_vp.set((intercept2-intercept1)/(m1-m2))
    def save_bounds_1(self):
        fname = self.get_selected()[0]
        cvalues = self.get_cursor_values(fname, self.currently_displayed)
        self.bounds[0].set(cvalues[0])
        self.bounds[1].set(cvalues[1])
        self.bounds1.set(value = str(int(self.currently_displayed[fname][0][self.bounds[0].get()])) + " to " + str(int(self.currently_displayed[fname][0][self.bounds[1].get()])))

    def save_bounds_2(self):
        fname = self.get_selected()[0]
        cvalues = self.get_cursor_values(fname, self.currently_displayed)
        self.bounds[2].set(cvalues[0])
        self.bounds[3].set(cvalues[1])
        self.bounds2.set(value = str(int(self.currently_displayed[fname][0][self.bounds[2].get()])) + " to " + str(int(self.currently_displayed[fname][0][self.bounds[3].get()])))





    #FIXME incorrect formula
    def debye_length(self, fname, options_list):
        """
        Calculates the debye length of the plasma
    
        Makes a crude estimate to isat, as the tenth current value from the left
        """
        data = self.tkinter_frame.currently_displayed[fname]
        
        isat_value = abs(data[1][10])

        ne = isat_value/(self.elementary_charge * self.probe_area * 10**(-3)) * (self.gas_type * 2 * math.pi / (float(input("Temperature: ")) * self.elementary_charge) ) ** 0.5






     tkinter_frame.debye_frame = ctk.CTkFrame(master = tkinter_frame.results_frame)
        tkinter_frame.debye_button = ctk.CTkButton(master = tkinter_frame.debye_frame,
                command = tkinter_frame.debye,
                text = u"\u03BB debye",
                height = 30,
                width = 30)
        tkinter_frame.debye_label = ctk.CTkLabel(master = tkinter_frame.debye_frame,
                textvar   









    def console_input_receive(self):
        self.console.configure(state="normal")
        self.console_command(self.console_input_var.get())
        self.console.insert(tk.END, "> " + self.console_input_var.get() + "\n")
        self.console_input_var.set("")
        self.console.see("end")
        self.console.configure(state="disabled")

    # TODO: Add the commands to a file
    # FIXME: commands broken with the new button handling method
    def add_commands(self):
        self.valid_commands["explorer"] = ["file_browser", [], []]
        self.valid_commands["savgol"] = [
            "savgol", ["winlen", "polyorder"], [53, 3]]
        self.valid_commands["boxav"] = ["box_average", [], []]
        self.valid_commands["spline"] = ["spline_extrapolate", ["p"], [1000]]
        self.valid_commands["average"] = ["average", [], []]
        self.valid_commands["repair_options"] = ["fix_options", [], []]
        self.valid_commands["delete"] = ["delete_file", [], []]
        self.valid_commands["zoom"] = ["zoomfunc", [], []]
        self.valid_commands["pan"] = ["panfunc", [], []]
        self.valid_commands["save"] = ["save_data", [], []]
        self.valid_commands["saveimage"] = ["save_image_data", [], []]
        self.valid_commands["settings"] = ["open_help_and_options", [], []]
        self.valid_commands["derivative"] = ["derivative", ["o"], [1]]
        self.valid_commands["power"] = ["raiseto", ["o"], [2]]
        self.valid_commands["abs"] = ["absolute_v", [], []]
        self.valid_commands["rescale"] = ["rescale", [], []]
        self.valid_commands["isat"] = ["basic_isat", [], []]
        self.valid_commands["ln"] = ["natural", [], []]
        self.valid_commands["trim"] = ["trim", [], []]
        self.valid_commands["hide"] = ["hide_graph", [], []]
        self.valid_commands["gettemp"] = ["temperature_value", [], []]
        self.valid_commands["settemp"] = ["set_temp", ["t"], [0]]




        def get_option_values(self, command):
        # needs ERROR messages
        command_name = command.split(" ")[0]
        command_options_and_values = {}
        for command_chunk in command.split("-")[1:]:
            command_options_and_values[command_chunk.split()[0]] = command_chunk.split()[
                1:]
        return command_name, command_options_and_values

    def console_command(self, ctxt):
        cn, co = self.get_option_values(ctxt)
        if cn in self.valid_commands:
            fixed_options = self.valid_commands[cn][2][:]
            for o in co.keys():
                try:
                    ii = self.valid_commands[cn][1].index(o)
                    fixed_options[ii] = co[o][0]
                except:
                    print("not a valid optoin")

            cmd = "self."
            cmd += self.valid_commands[cn][0]
            cmd += "("
            for o in fixed_options:
                cmd += str(o)
                cmd += ","
            if cmd[-1] == ",":
                cmd = cmd[:-1]
            cmd += ")"

            eval(cmd)





    def probe_area_update(self):
        try:
            self.probe_area = self.probe_area_sef.get_value()
            print("Set the probe area to: %f square cm." % self.probe_area)
        except:
            self.open_popup("No value entered for probe area",
                            "yellow", "NOTICE")
